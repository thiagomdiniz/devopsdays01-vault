name: MyApp Deploy

on:
  repository_dispatch:
    types: [trigger-deploy-workflow]

env:
  AWS_ACCOUNT: "357834747308"
  AWS_REGION: "us-east-1"
  CLUSTER_NAME: "devopsdays-vault"
  REPOSITORY_NAME: "devopsdays-vault"

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      service_name: ${{ steps.extract.outputs.service_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.sha }}

      - name: Extract Service Name & Version
        id: extract
        run: |
          service_name=${{ github.event.client_payload.service }}
          echo "Service Name: $service_name"
          echo "service_name=$service_name" >> "$GITHUB_OUTPUT"

          version=${{ github.event.client_payload.version }}
          echo "Version: $version"
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.7'

      - name: Terraform init
        run: terraform init -backend-config=environment/dev/backend.tfvars
        working-directory: ./iac-myapp-deploy/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Terraform plan
        run: terraform plan -var-file=environment/dev/terraform.tfvars -var container_image=${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}/${{ steps.extract.outputs.service_name }}:${{ steps.extract.outputs.version }}
        working-directory: ./iac-myapp-deploy/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
      
      - name: Terraform apply
        run: terraform apply -auto-approve -var-file=environment/dev/terraform.tfvars -var container_image=${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}/${{ steps.extract.outputs.service_name }}:${{ steps.extract.outputs.version }}
        working-directory: ./iac-myapp-deploy/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      # - name: Request Wrapped Secret ID from Lambda
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_REGION: ${{ env.AWS_REGION }}
      #   run: |
      #     WRAPPED_SECRET_ID=$(aws lambda invoke \
      #       --function-name vault-myapp \
      #       --query 'body' \
      #       --output text | jq -r '.wrapped_token')
      #     echo "Wrapped Secret ID retrieved."

  wait-ecs-deploy:
    runs-on: ubuntu-latest
    needs:
      - deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.sha }}

      - name: ECS wait for deploy to complete
        run: aws ecs wait services-stable --cluster ${{ env.CLUSTER_NAME }} --services ${{ env.SERVICE_NAME }}-service
        env:
          SERVICE_NAME: ${{ needs.deploy.outputs.service_name }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}